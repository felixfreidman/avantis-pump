"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),Object.defineProperty(e,"prototype",{writable:!1}),e}var fancySwiper=new Swiper("#processSwiper",{direction:"horizontal",loop:!0,speed:500,spaceBetween:34,effect:"fade",fadeEffect:{crossFade:!0},slidesPerView:"1",pagination:{el:".process-parent__navigation",clickable:!0}}),cafeSwiper=new Swiper("#resultSeiper",{direction:"horizontal",loop:!1,speed:400,effect:"cards",slidesPerView:"1",navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}}),faqBlocks=document.querySelectorAll(".faq-parent__block");faqBlocks.forEach(function(e){e.addEventListener("click",function(){e.classList.contains("faq-parent__block--active")?e.classList.remove("faq-parent__block--active"):e.classList.add("faq-parent__block--active")})}),AOS.init();var preload=function(){var e=new THREE.LoadingManager;e.onLoad=function(){new Environment(t,i)};var t=null,i=(new THREE.FontLoader(e).load("https://res.cloudinary.com/dydre7amr/raw/upload/v1612950355/font_zsd4dr.json",function(e){t=e}),new THREE.TextureLoader(e).load("https://res.cloudinary.com/dfvtkoboz/image/upload/v1605013866/particle_a64uzf.png"))};"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?preload():document.addEventListener("DOMContentLoaded",preload);var Environment=function(){function i(e,t){_classCallCheck(this,i),this.font=e,this.particle=t,this.container=document.querySelector("#magic"),this.scene=new THREE.Scene,this.createCamera(),this.createRenderer(),this.setup(),this.bindEvents()}return _createClass(i,[{key:"bindEvents",value:function(){window.addEventListener("resize",this.onWindowResize.bind(this))}},{key:"setup",value:function(){this.createParticles=new CreateParticles(this.scene,this.font,this.particle,this.camera,this.renderer)}},{key:"render",value:function(){this.createParticles.render(),this.renderer.render(this.scene,this.camera)}},{key:"createCamera",value:function(){this.camera=new THREE.PerspectiveCamera(65,this.container.clientWidth/this.container.clientHeight,1,1e4),this.camera.position.set(0,70,100)}},{key:"createRenderer",value:function(){var e=this;this.renderer=new THREE.WebGLRenderer,this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.outputEncoding=THREE.sRGBEncoding,this.container.appendChild(this.renderer.domElement),this.renderer.setAnimationLoop(function(){e.render()})}},{key:"onWindowResize",value:function(){this.camera.aspect=this.container.clientWidth/this.container.clientHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.container.clientWidth,this.container.clientHeight)}}]),i}(),CreateParticles=function(){function r(e,t,i,n,a){_classCallCheck(this,r),this.scene=e,this.font=t,this.particleImg=i,this.camera=n,this.renderer=a,this.raycaster=new THREE.Raycaster,this.mouse=new THREE.Vector2(-200,200),this.colorChange=new THREE.Color,this.buttom=!1,this.data={text:"?",amount:1500,particleSize:1,particleColor:16777215,textSize:80,area:250,ease:.05},this.setup(),this.bindEvents()}return _createClass(r,[{key:"setup",value:function(){var e=new THREE.PlaneGeometry(this.visibleWidthAtZDepth(100,this.camera),this.visibleHeightAtZDepth(100,this.camera)),t=new THREE.MeshBasicMaterial({color:65280,transparent:!0});this.planeArea=new THREE.Mesh(e,t),this.planeArea.visible=!1,this.createText()}},{key:"bindEvents",value:function(){document.addEventListener("mousedown",this.onMouseDown.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("mouseup",this.onMouseUp.bind(this))}},{key:"onMouseDown",value:function(){this.mouse.x=event.clientX/window.innerWidth*2-1,this.mouse.y=2*-(event.clientY/window.innerHeight)+1;var e=new THREE.Vector3(this.mouse.x,this.mouse.y,.5);e.unproject(this.camera);var t=e.sub(this.camera.position).normalize(),e=-this.camera.position.z/t.z;this.currenPosition=this.camera.position.clone().add(t.multiplyScalar(e));this.particles.geometry.attributes.position;this.buttom=!0,this.data.ease=.01}},{key:"onMouseUp",value:function(){this.buttom=!1,this.data.ease=.05}},{key:"onMouseMove",value:function(){this.mouse.x=event.clientX/window.innerWidth*2-1,this.mouse.y=2*-(event.clientY/window.innerHeight)+1}},{key:"render",value:function(e){var t=.001*performance.now()%12/12;Math.sin(2*t*Math.PI);this.raycaster.setFromCamera(this.mouse,this.camera);t=this.raycaster.intersectObject(this.planeArea);if(0<t.length)for(var i=this.particles.geometry.attributes.position,n=this.geometryCopy.attributes.position,a=this.particles.geometry.attributes.customColor,r=this.particles.geometry.attributes.size,s=t[0].point.x,o=t[0].point.y,h=(t[0].point.z,0),c=i.count;h<c;h++){var l=n.getX(h),d=n.getY(h),u=n.getZ(h),p=i.getX(h),m=i.getY(h),g=i.getZ(h);this.colorChange.setHSL(.5,1,1),a.setXYZ(h,this.colorChange.r,this.colorChange.g,this.colorChange.b),a.needsUpdate=!0,r.array[h]=this.data.particleSize,r.needsUpdate=!0;var v,f,E=this.distance(s,o,p,m),y=(f=s-p)*f+(v=o-m)*v,w=-this.data.area/y;this.buttom?(y=Math.atan2(v,f),p-=w*Math.cos(y),m-=w*Math.sin(y),this.colorChange.setHSL(357/360,1,.67),a.setXYZ(h,this.colorChange.r,this.colorChange.g,this.colorChange.b),a.needsUpdate=!0,(l+70<p||p<l-70||d+70<m||m<d-70)&&(this.colorChange.setHex(16734303),a.setXYZ(h,this.colorChange.r,this.colorChange.g,this.colorChange.b),a.needsUpdate=!0)):E<this.data.area&&(h%5==0?(E=Math.atan2(v,f),p-=.03*Math.cos(E),m-=.03*Math.sin(E),this.colorChange.setHSL(357/360,1,.67),a.setXYZ(h,this.colorChange.r,this.colorChange.g,this.colorChange.b),a.needsUpdate=!0,r.array[h]=this.data.particleSize/1.2):(f=Math.atan2(v,f),p+=w*Math.cos(f),m+=w*Math.sin(f),i.setXYZ(h,p,m,g),i.needsUpdate=!0,r.array[h]=1.3*this.data.particleSize),r.needsUpdate=!0,(l+10<p||p<l-10||d+10<m||m<d-10)&&(this.colorChange.setHex(16734303),a.setXYZ(h,this.colorChange.r,this.colorChange.g,this.colorChange.b),a.needsUpdate=!0,r.array[h]=this.data.particleSize/1.8,r.needsUpdate=!0)),p+=(l-p)*this.data.ease,m+=(d-m)*this.data.ease,g+=(u-g)*this.data.ease,i.setXYZ(h,p,m,g),i.needsUpdate=!0}}},{key:"createText",value:function(){var i=this,n=[],e=this.font.generateShapes(this.data.text,this.data.textSize),t=new THREE.ShapeGeometry(e);t.computeBoundingBox();var a=-.5*(t.boundingBox.max.x-t.boundingBox.min.x),r=(t.boundingBox.max.y-t.boundingBox.min.y)/2.85;t.center(),t.boundingBox.max=0,t.boundingBox.min=12,console.log(t);for(var s=[],o=0;o<e.length;o++){var h=e[o];if(h.holes&&0<h.holes.length)for(var c=0;c<h.holes.length;c++){var l=h.holes[c];s.push(l)}}e.push.apply(e,s);for(var d=[],u=[],p=0;p<e.length;p++){var m=e[p],g="Path"==m.type?this.data.amount/2:this.data.amount;m.getSpacedPoints(g).forEach(function(e,t){e=new THREE.Vector3(e.x,e.y,0);n.push(e),d.push(i.colorChange.r,i.colorChange.g,i.colorChange.b),u.push(1)})}t=(new THREE.BufferGeometry).setFromPoints(n);t.translate(a,r,0),t.setAttribute("customColor",new THREE.Float32BufferAttribute(d,3)),t.setAttribute("size",new THREE.Float32BufferAttribute(u,1));r=new THREE.ShaderMaterial({uniforms:{color:{value:new THREE.Color(16777215)},pointTexture:{value:this.particleImg}},vertexShader:document.getElementById("vertexshader").textContent,fragmentShader:document.getElementById("fragmentshader").textContent,blending:THREE.AdditiveBlending,depthTest:!1,transparent:!0});this.particles=new THREE.Points(t,r),this.scene.add(this.particles),this.scene.background=new THREE.Color(2825782),this.geometryCopy=new THREE.BufferGeometry,this.geometryCopy.copy(this.particles.geometry)}},{key:"visibleHeightAtZDepth",value:function(e,t){var i=t.position.z;e<i?e-=i:e+=i;t=t.fov*Math.PI/180;return 2*Math.tan(t/2)*Math.abs(e)}},{key:"visibleWidthAtZDepth",value:function(e,t){return this.visibleHeightAtZDepth(e,t)*t.aspect}},{key:"distance",value:function(e,t,i,n){return Math.sqrt(Math.pow(e-i,2)+Math.pow(t-n,2))}}]),r}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
